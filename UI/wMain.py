# -*- coding: utf-8 -*-
# 2021/07/9
# author:钟军
# e-mail:junzhong0917@163.com

# Form implementation generated from reading ui file 'wMain.ui'
#
# Created by: PyQt5 UI code generator 5.15.4
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.
import os
from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtCore import QRectF, QSize, Qt, pyqtSignal
from PyQt5.QtGui import QBrush, QColor, QIcon, QPainter, QPainterPath, QPalette, QPixmap
from PyQt5.QtWidgets import QFileDialog, QFrame, QGraphicsDropShadowEffect, QGroupBox, QMessageBox, QWidget
from UI.parametersFrame import Ui_parametersFrame
from model import canvas, plot, progressbar
from model.dataView import FileSystemTableView
from UI.mainWidgets import Ui_mainWidgets
from UI.siderBar import siderBar
from UI.leftBar import leftBar
import shutil


class Ui_MainWindow(object):
    """
    主窗口UI类
    """
    log_signal = pyqtSignal(str)

    def setupUi(self, MainWindow):
        """

        :param MainWindow:
        :return:
        """
        self.MainWindow = MainWindow
        self.MainWindow.setObjectName("MainWindow")
        self.MainWindow.resize(1600, 900)
        self.MainWindow.setContentsMargins(0, 0, 0, 0)
        # 设置无边框圆角带阴影窗口
        # self.MainWindow.setWindowFlag(QtCore.Qt.FramelessWindowHint)  # 无边框
        # ===============透明阴影====================
        # self.MainWindow.setAutoFillBackground(True) #一定要加上
        #self.MainWindow.setAttribute(QtCore.Qt.WA_TranslucentBackground)  # 窗口透明
        #shadow=QGraphicsDropShadowEffect()  # 创建阴影
        #shadow.setBlurRadius(20)  # 设置阴影大小为9px
        #shadow.setColor(QColor("#444444"))  # 设置颜色透明度为100的（0,0,0）黑色
        #shadow.setOffset(0,0)  # 阴影偏移距离为0px
        #self.MainWindow.setGraphicsEffect(shadow)  # 添加阴影
        # 最大化显示窗口
        # self.MainWindow.showMaximized()
        self.MainWindow.setCursor(QtGui.QCursor(QtCore.Qt.ArrowCursor))
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.MainLayout = QtWidgets.QHBoxLayout(self.centralwidget)
        self.MainLayout.setObjectName("MainLayout")
        self.MainLayout.setContentsMargins(1, 1, 1, 1)
        self.MainLayout.setSpacing(0) # 控件之间的距离为0

        # 创建绘图区Frame
        self.mainWorkFrame = QtWidgets.QFrame(self.centralwidget)
        self.mainWorkFrame.setObjectName("mainWorkFrame")
        
        # 实例化绘图区类对象
        self.mainWidgetsObj = Ui_mainWidgets(self.mainWorkFrame, self)
        
        
        # 文件树

        self.dataViewFrame = QtWidgets.QFrame()
        self.dataViewFrame.setObjectName("dataViewFrame")
        self.dataViewFrame.setStyleSheet(("QFrame{\n"
                                          "     border-radius: 9px;\n"
                                          "}"))
        # 创建dataview对象
        self.dataView = FileSystemTableView(self.dataViewFrame, self)
        # 设置水平和垂直布局策略，这里水平固定
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Expanding)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.dataView.sizePolicy().hasHeightForWidth())
        self.dataView.setSizePolicy(sizePolicy)
        
        self.dataView.setObjectName("dataView")
        self.dataviewLayout = QtWidgets.QVBoxLayout(self.dataViewFrame)
        self.dataviewLayout.setContentsMargins(1, 0, 0, 0)
        self.dataviewLayout.setSpacing(0)
        self.dataviewLabel = QtWidgets.QLabel()
        self.dataviewLabel.setText('文件管理器')
        self.dataviewLabel.setStyleSheet(("QLabel{\n"
                                          "    background-color: #c7e0ff;\n"
                                          "border-radius: 9px;"
                                          "}"))
        # 字体
        font_1 = QtGui.QFont()
        font_1.setFamily("黑体")
        font_1.setPointSize(12)
        font_1.setBold(False)
        self.dataviewLabel.setFont(font_1)
        self.dataviewLabel.setMaximumWidth(230)
        self.dataviewLabel.setMinimumHeight(35)
        self.dataviewLabel.setMaximumHeight(35)
        self.dataviewLabel.setAlignment(QtCore.Qt.AlignCenter)
        self.dataviewLayout.addWidget(self.dataviewLabel)
        self.dataviewLayout.addWidget(self.dataView)
        # 
        
        MainWindow.setCentralWidget(self.centralwidget)
        # 菜单栏
        self.menuBar = QtWidgets.QMenuBar(MainWindow)
        self.menuBar.setGeometry(QtCore.QRect(0, 0, 886, 24))
        self.menuBar.setObjectName("menuBar")
        self.file_menu = QtWidgets.QMenu(self.menuBar)
        self.file_menu.setObjectName("file_menu")
        self.edit_menu = QtWidgets.QMenu(self.menuBar)
        self.edit_menu.setObjectName("edit_menu")
        self.view_menu = QtWidgets.QMenu(self.menuBar)
        self.view_menu.setObjectName("view_menu")
        self.help_menu = QtWidgets.QMenu(self.menuBar)
        self.help_menu.setObjectName("help_menu")
        MainWindow.setMenuBar(self.menuBar)
        # 工具栏
        self.toolBar = QtWidgets.QToolBar(MainWindow)
        self.toolBar.setCursor(QtGui.QCursor(QtCore.Qt.ArrowCursor))
        self.toolBar.setMouseTracking(False)
        self.toolBar.setObjectName("toolBar")
        MainWindow.addToolBar(QtCore.Qt.TopToolBarArea, self.toolBar)
        # 状态栏
        self.statusBar = QtWidgets.QStatusBar(MainWindow)
        self.statusBar.setObjectName("statusBar")
        MainWindow.setStatusBar(self.statusBar)
        #self.statusBar.setMaximumHeight(25)
        self.statusBar.setStyleSheet(("QStatusBar{\n"
                                        "background:#0F6BAE;\n"
                                        "}\n"))

                                      
        # 实例化进度条类对象
        self.ProgressBar = progressbar.ProgressBar(self)
        # self.plotObj.updata_progressbar_signal.connect(self.ProgressBar.updata_PBar)

        # 为工具栏添加功能
        self.openFile_action = QtWidgets.QAction(MainWindow)
        icon = QtGui.QIcon()
        icon.addPixmap(QtGui.QPixmap("./icons/open.ico"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.openFile_action.setIcon(icon)
        self.openFile_action.setObjectName("openFile_action")
        self.saveFile_action = QtWidgets.QAction(MainWindow)
        icon1 = QtGui.QIcon()
        icon1.addPixmap(QtGui.QPixmap("./icons/save.ico"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.saveFile_action.setIcon(icon1)
        self.saveFile_action.setObjectName("saveFile_action")

        self.cleanALl_action = QtWidgets.QAction(MainWindow)
        icon3 = QtGui.QIcon()
        icon3.addPixmap(QtGui.QPixmap("./icons/clear.ico"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.cleanALl_action.setIcon(icon3)
        self.cleanALl_action.setObjectName("cleanALl_action")
        self.plotCircle_action = QtWidgets.QAction(MainWindow)  # 画二维圆图
        icon4 = QtGui.QIcon()
        icon4.addPixmap(QtGui.QPixmap("./icons/plot.ico"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.plotCircle_action.setIcon(icon4)
        self.plotCircle_action.setObjectName("plotCircle_action")
        self.plotPoint_action = QtWidgets.QAction(MainWindow)  # 画点图
        icon5 = QtGui.QIcon()
        icon5.addPixmap(QtGui.QPixmap("./icons/plotPoint.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.plotPoint_action.setIcon(icon5)
        self.plotPoint_action.setObjectName("plotPoint_action")
        self.file_menu.addAction(self.openFile_action)
        self.file_menu.addAction(self.saveFile_action)
        self.file_menu.addSeparator()
        self.edit_menu.addAction(self.plotCircle_action)
        self.edit_menu.addAction(self.plotPoint_action)
        self.edit_menu.addAction(self.cleanALl_action)
        self.menuBar.addAction(self.file_menu.menuAction())
        self.menuBar.addAction(self.edit_menu.menuAction())
        self.menuBar.addAction(self.view_menu.menuAction())
        self.menuBar.addAction(self.help_menu.menuAction())
        self.toolBar.addAction(self.openFile_action)
        # self.toolBar.addAction(self.saveFile_action)
        self.toolBar.addSeparator()
        self.toolBar.addAction(self.cleanALl_action)
        self.toolBar.addSeparator()
        self.toolBar.addAction(self.plotPoint_action)
        self.toolBar.addAction(self.plotCircle_action)
        self.toolBar.addSeparator()
        self.previousPage_action = self.toolBar.addAction(QIcon("./icons/previous.png"), u'上一张')
        self.nextPage_action = self.toolBar.addAction(QIcon("./icons/next.png"), u'下一张')
        self.toolBar.addSeparator()
        self.composeGIF_action = self.toolBar.addAction(QIcon("./icons/GIF.png"), u'生成GIF')
        self.playGIF_action = self.toolBar.addAction(QIcon("./icons/interface.png"), u'播放GIF')
        self.pauseGIF_action = self.toolBar.addAction(QIcon("./icons/pause.png"), u'暂停GIF')

        self.toolBar.setToolButtonStyle(QtCore.Qt.ToolButtonTextBesideIcon)
        #   创建侧边栏控件对象
        
        # 左侧边栏listwidget
        self.leftFrame = QtWidgets.QFrame(self.centralwidget)
        self.leftFrame.setObjectName('leftFrame')
        self.leftFrame.setContentsMargins(0,0,0,0)
        self.leftBar  = leftBar(self.leftFrame,self)
        #self.siderBar = siderBar(self.leftFrame, self)
        # 为centralwidget添加控件
        self.MainLayout.addWidget(self.leftFrame)
        self.MainLayout.addWidget(self.mainWorkFrame)

        #
        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

    def retranslateUi(self, MainWindow):
        """

        :param MainWindow:
        :return:
        """
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "MainWindow"))
        self.file_menu.setTitle(_translate("MainWindow", "文件"))
        self.edit_menu.setTitle(_translate("MainWindow", "编辑"))
        self.view_menu.setTitle(_translate("MainWindow", "可视化操作"))
        self.help_menu.setTitle(_translate("MainWindow", "帮助"))
        self.toolBar.setWindowTitle(_translate("MainWindow", "toolBar"))
        self.openFile_action.setText(_translate("MainWindow", "打开"))
        self.saveFile_action.setText(_translate("MainWindow", "另存为"))
        self.saveFile_action.setShortcut(_translate("MainWindow", "Ctrl+S"))
        self.cleanALl_action.setText(_translate("MainWindow", "清除全部"))
        self.plotCircle_action.setText(_translate("MainWindow", "绘制二维圆"))
        self.plotPoint_action.setText(_translate("MainWindow", "绘制散点图"))
        # 绑定事件函数
        self.openFile_action.triggered.connect(self.open_FileDir)
        self.plotCircle_action.triggered.connect(self.dataView.plotAllSlot_circle)
        self.plotPoint_action.triggered.connect(self.dataView.plotAllSlot_point)
        self.nextPage_action.triggered.connect(self.mainWidgetsObj.nextPage)
        self.previousPage_action.triggered.connect(self.mainWidgetsObj.previousPage)
        self.composeGIF_action.triggered.connect(self.mainWidgetsObj.compose_gif)
        self.playGIF_action.triggered.connect(self.mainWidgetsObj.playGif)
        self.pauseGIF_action.triggered.connect(self.mainWidgetsObj.pauseGif)
        self.cleanALl_action.triggered.connect(self.clear_all)

    def open_FileDir(self):
        """
        打开文件对话框，读取文件夹下.dat格式的文件列表，储存在列表中。并调用dataview对象的addData方法，初始化文件管理器和画布
        
        :return:
        """
        self.dataView.myModel.removeRows(0,self.dataView.myModel.rowCount())  # 删除所有行
        self.folderDir = None
        self.folderDir = QFileDialog.getExistingDirectory(self.MainWindow, '选取文件夹', "./")  # 打开文件夹选择对话框
        if self.folderDir == "":
            pass  # 防止未选择文件或者关闭对话框程序闪退
        else:

            AllFileList = os.listdir(self.folderDir)  # os.listdir读取文件夹目录的所有文件，并返回文件名列表
            self.prefixList = []
            self.absolute_FileList = []
            self.FileNameList = []
            for FileName in AllFileList:
                absolutePath = os.path.join(self.folderDir, FileName)  # 拼接成绝对路径
                if os.path.isfile(absolutePath):  # 判断对象是否为文件，传入的参数必须是绝对路径，而os.listdir()获得的是文件名，需要join拼接成绝对路径，
                    self.prefixList.append(os.path.splitext(FileName)[0])  # 前缀名列表
                    if os.path.splitext(FileName)[1] == '.dat':  # os.path.splitext（）分离文件名和后缀，返回元组
                        self.FileNameList.append(FileName)  # 文件名列表
                        self.absolute_FileList.append(absolutePath)  # 绝对路径文件列表
            # 文件名列表删除init_xyr.dat
            if self.FileNameList[-1] == 'init_xyr.dat':
                del self.FileNameList[-1]
            self.dataView.addData(self.dataView.myModel, self.FileNameList, self.folderDir)  # 初始化文件管理器和matplotlib画布

    def clear_all(self):
        """清空所有
        TODO:实现清空“图像参数”模块的功能
        """
        self.dataView.myModel.removeRows(0,self.dataView.myModel.rowCount())  # 删除所有行
        self.mainWidgetsObj.tabWidget.clear()  # 输出所有的可视化图像
        self.mainWidgetsObj.select_comBox.clear() # 输出文件选择框
        self.ProgressBar.statusLabel.clear() # 状态栏信息
        self.ProgressBar.plotAllLabel.clear()
        self.ProgressBar.beginPlotLabel.clear()
        self.ProgressBar.pBar.setValue(0)
        self.ProgressBar.pBar.close()
        # leftbar
        
        self.leftBar.textBrowser_data.clear() # 清空数据记录信息
        

class RoundShadow(QWidget):
    """
    圆角边框类
    """

    def __init__(self, parent=None):
        super(RoundShadow, self).__init__(parent)
        self.border_width = 8
        # 设置 窗口无边框和背景透明 *必须
        self.setAttribute(Qt.WA_TranslucentBackground)
        self.setWindowFlags(Qt.FramelessWindowHint | Qt.Window)

    def paintEvent(self, paintEvent):
    	# 阴影
        path = QPainterPath()
        path.setFillRule(Qt.WindingFill)

        pat = QPainter(self)
        pat.setRenderHint(pat.Antialiasing)
        pat.fillPath(path, QBrush(Qt.white))

        color = QColor(192, 192, 192, 50)

        for i in range(10):
            i_path = QPainterPath()
            i_path.setFillRule(Qt.WindingFill)
            ref = QRectF(10-i, 10-i, self.width()-(10-i)*2, self.height()-(10-i)*2)
            # i_path.addRect(ref)
            i_path.addRoundedRect(ref, self.border_width, self.border_width)
            color.setAlpha(150 - i**0.5*50)
            pat.setPen(color)
            pat.drawPath(i_path)

        # 圆角
        pat2 = QPainter(self)
        pat2.setRenderHint(pat2.Antialiasing)  # 抗锯齿
        pat2.setBrush(Qt.white)
        pat2.setPen(Qt.transparent)

        rect = self.rect()
        rect.setLeft(9)
        rect.setTop(9)
        rect.setWidth(rect.width()-9)
        rect.setHeight(rect.height()-9)
        pat2.drawRoundedRect(rect, 4, 4)



class myMainWindow(QtWidgets.QMainWindow):
    """对QMainWindow类重写，实现一些功能"""

    def closeEvent(self, event):
        """
        重写closeEvent方法，实现窗体关闭时执行一些代码
        :param event: close()触发的事件
        :return: None
        """
        reply = QtWidgets.QMessageBox.question(self,
                                               '本程序',
                                               "是否要退出程序？",
                                               QtWidgets.QMessageBox.Yes | QtWidgets.QMessageBox.No,
                                               QtWidgets.QMessageBox.No)
        if reply == QtWidgets.QMessageBox.Yes:
            event.accept()
            # FIXME: ！报错，无法删除gif文件
            shutil.rmtree('./temp save files')
            os.mkdir('./temp save files')
        else:
            event.ignore()
            

    def paintEvent(self, event):
    	# 阴影
        self.border_width = 8
        
        path = QPainterPath()
        path.setFillRule(Qt.WindingFill)

        pat = QPainter(self)
        pat.setRenderHint(pat.Antialiasing)
        pat.fillPath(path, QBrush(Qt.white))

        color = QColor(192, 192, 192, 50)

        for i in range(10):
            i_path = QPainterPath()
            i_path.setFillRule(Qt.WindingFill)
            ref = QRectF(10-i, 10-i, self.width()-(10-i)*2, self.height()-(10-i)*2)
            # i_path.addRect(ref)
            i_path.addRoundedRect(ref, self.border_width, self.border_width)
            color.setAlpha(150 - i**0.5*50)
            pat.setPen(color)
            pat.drawPath(i_path)

        # 圆角
        pat2 = QPainter(self)
        pat2.setRenderHint(pat2.Antialiasing)  # 抗锯齿
        pat2.setBrush(Qt.white)
        pat2.setPen(Qt.transparent)

        rect = self.rect()
        rect.setLeft(9)
        rect.setTop(9)
        rect.setWidth(rect.width()-9)
        rect.setHeight(rect.height()-9)
        pat2.drawRoundedRect(rect, 4, 4)
        